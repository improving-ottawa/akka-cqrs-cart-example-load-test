
https://cloud.google.com/kubernetes-engine/docs/tutorials/stateful-workload#new-instance

# -------------------------------------------------------------------------------------
# STEP 0: Login & Authentication
# -------------------------------------------------------------------------------------

Authenticate your gcloud SDK from your local machine:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
REF: https://cloud.google.com/artifact-registry/docs/docker/authentication

gcloud auth login


Set the right project:
~~~~~~~~~~~~~~~~~~~~~~~
gcloud projects list |grep scylla
gcloud config set project scylla-cassandra-comparison



# -------------------------------------------------------------------------------------
# STEP 1: Load image in the container registry
# -------------------------------------------------------------------------------------


To create an Artifactory repository:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gcloud artifacts repositories create load-test --repository-format=docker \
--location=northamerica-northeast2 --description="To store scylla vs cassandra load-test related images"

REF: https://cloud.google.com/artifact-registry/docs/docker/store-docker-container-images#create



List artifact repositories that you have access:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
a.) Visit https://console.cloud.google.com/artifacts?project=scylla-cassandra-comparison

OR

b.)
gcloud artifacts repositories list
#
# Listing items under project scylla-cassandra-comparison, across all locations.
#
# ARTIFACT_REGISTRY
#
# REPOSITORY: load-test
# ...
# ...
# ...
#



Configure your Artifact Registry credentials for use with Docker directly in gcloud:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
REF: https://cloud.google.com/artifact-registry/docs/docker/authentication

gcloud auth configure-docker northamerica-northeast2-docker.pkg.dev
gcloud artifacts locations list
cat ~/.docker/config.json



# -------------------------------------------------------------------------------------
# SETP-2 Create Kubernetes cluster (if it is not already created)
# -------------------------------------------------------------------------------------

Enable 'Kubernetes Engine API' in your project by visiting 'Enable access to API' section of GCP website for your project.



If it does not exists, then Create a Kubernetes Cluster:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

OPTION-1
*********
Visit https://console.cloud.google.com/kubernetes/list/overview?project=scylla-cassandra-comparison

From 'Create cluster' dialog select <CONFIGURE> for 'Standard: You manage your cluster' option.

Next, on 'Cluster basics' page:

NAME: load-test
LOCATION TYPE: Zonal
ZONE: northamerica-northeast2-a
CONTROL PLANE VERSION: Release channel (AND accept defaults for 'Release channel' and 'Version' drop downs)

Hit  ... <CREATE> ...


OPTION-2:
*********
REF: https://cloud.google.com/sdk/gcloud/reference/beta/container/clusters/create

gcloud beta container clusters create "load-test"  \
        --project "scylla-cassandra-comparison"  \
        --zone "northamerica-northeast2-a"  \
        --no-enable-basic-auth  \
        --cluster-version "1.24.10-gke.2300"  \
        --release-channel "regular"  \
        --machine-type "e2-highcpu-16"  \
        --image-type "COS_CONTAINERD"  \
        --disk-type "pd-balanced"  \
        --disk-size "100"  \
        --metadata disable-legacy-endpoints=true  \
        --scopes "https://www.googleapis.com/auth/devstorage.read_only","https://www.googleapis.com/auth/logging.write","https://www.googleapis.com/auth/monitoring","https://www.googleapis.com/auth/servicecontrol","https://www.googleapis.com/auth/service.management.readonly","https://www.googleapis.com/auth/trace.append"  \
        --max-pods-per-node "20"  \
        --num-nodes "3"  \
        \
        --enable-autoscaling \
        --max-nodes "6"  \
        --min-nodes "0"  \
        \
        --logging=SYSTEM,WORKLOAD  \
        --monitoring=SYSTEM  \
        --enable-ip-alias  \
        --network "projects/scylla-cassandra-comparison/global/networks/default"  \
        --subnetwork "projects/scylla-cassandra-comparison/regions/northamerica-northeast2/subnetworks/default" \
        --no-enable-intra-node-visibility  \
        --default-max-pods-per-node "20"  \
        --no-enable-master-authorized-networks  \
        --addons HorizontalPodAutoscaling,HttpLoadBalancing,GcePersistentDiskCsiDriver,GcpFilestoreCsiDriver  \
        --enable-autoupgrade  \
        --enable-autorepair  \
        --max-surge-upgrade 1  \
        --max-unavailable-upgrade 0  \
        --enable-shielded-nodes  \
        --node-locations "northamerica-northeast2-a"

NOTE:
machine-type        # By default 'e2-medium'
disk-type           # Must be one of: pd-standard, pd-ssd, pd-balanced. Default "pd-balanced"
disk-size           # Size for node VM boot disks in GB. Default 100 GB
max-pods-per-node   # The max number of pods per node for this node pool. Must be between 8 and 256. Default 110 (IMHO it is too much for our use case)
num-nodes           # The number of nodes to be created in each of the cluster's zones. Default 3.
max-nodes           # Maximum number of nodes per zone in the node pool.
min-nodes           # Minimum number of nodes per zone in the node pool.



When successful, the above command will respond back with the result similar to the following:

kubeconfig entry generated for load-test.
NAME: load-test
LOCATION: northamerica-northeast2-a
MASTER_VERSION: 1.24.10-gke.2300
MASTER_IP: 34.130.146.184
MACHINE_TYPE: e2-medium
NODE_VERSION: 1.24.10-gke.2300
NUM_NODES: 3
STATUS: RUNNING



Once created, you can access this cluster by visiting:
https://console.cloud.google.com/kubernetes/list/overview?project=scylla-cassandra-comparison
(in console.cloud.google.com)



Configure 'kubectl'  to work with GKE cluster in your project:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
REF: https://cloud.google.com/kubernetes-engine/docs/how-to/cluster-access-for-kubectl

gcloud components update

# Install KUBECTL if it is not already installed
gcloud components install kubectl
kubectl version --short

# Install KUBECTl plugin for GKE, if not already installed
gcloud components install gke-gcloud-auth-plugin
gke-gcloud-auth-plugin --version


# Fetch GKE cluster credentials
gcloud container clusters get-credentials load-test \
    --zone=northamerica-northeast2-a


kubectl config view
kubectl cluster-info

kubectl config current-context
# should return something like: gke_scylla-cassandra-comparison_northamerica-northeast2-a_load-test



# -------------------------------------------------------------------------------------
# SETP-3 Deploy 'shopping-cart-service' application.
# -------------------------------------------------------------------------------------

Create and publish 'shopping-cart-service' image to GCP artifact repository:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd ~/Work/akka-cqrs-cart-example-load-test/shopping-cart-service

sbt clean compile

sbt clean docker:publishLocal

docker tag shopping-cart-load-test/shopping-cart-service:0.3.0-SNAPSHOT \
northamerica-northeast2-docker.pkg.dev/scylla-cassandra-comparison/load-test/shopping-cart-service:0.3.0-SNAPSHOT

docker push northamerica-northeast2-docker.pkg.dev/scylla-cassandra-comparison/load-test/shopping-cart-service:0.3.0-SNAPSHOT



Deploy shopping-cart-service:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kubectl apply -f deployment/resources.yaml
kubectl get services


SIDE BAR: Deploy the container based on image from Artifactory:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
REF: https://cloud.google.com/artifact-registry/docs/integrate-gke#gcloud
TEMPLATE: kubectl run [NAME] --image=LOCATION-docker.pkg.dev/PROJECT-ID/REPOSITORY/IMAGE:TAG

kubectl run shopping-cart-service --image=northamerica-northeast2-docker.pkg.dev/scylla-cassandra-comparison/load-test/shopping-cart-service:0.2.0-SNAPSHOT



Configure Port Forwarding for 'shopping-cart-service':
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

kubectl port-forward service/shopping-cart-service 8101:8101
# TODO: Not yet working, as a result we have to use the following Load Balancer service for end-to-end smog-testing the 'shopping-cart-service'



Define Load Balancer service for shopping-cart-service :
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
REF: https://medium.com/google-cloud/deploying-service-or-ingress-on-gke-59a49b134e3b
# FIRST, create 'service.yaml' with following contents at same location as that of 'resources.yaml':

---
apiVersion: v1
kind: Service
metadata:
  name: shopping-cart-service
spec:
  type: LoadBalancer
  ports:
    - port: 8101
      targetPort: 8101
  selector:
    app: shopping-cart-service


# THEN execute following command:
kubectl apply -f deployment/service.yaml




Send GRPc requests for basic testing:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# NOTE: 34.130.154.233 is the IP address of the external load-balancer service.
grpcurl -d '{"cartId":"cart1", "itemId":"socks", "quantity":3}' -plaintext 34.130.154.233:8101 shoppingcart.ShoppingCartService.AddItem




# -------------------------------------------------------------------------------------
# SETP-4 load-test application deployment
# -------------------------------------------------------------------------------------

Create and publish 'shopping-cart-load-test-driver' image to GCP artifact repository:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd ~/Work/akka-cqrs-cart-example-load-test/load-testing

sbt clean compile

sbt clean docker:publishLocal

docker tag shopping-cart-load-test/shopping-cart-load-test-driver:0.3.0-SNAPSHOT \
northamerica-northeast2-docker.pkg.dev/scylla-cassandra-comparison/load-test/shopping-cart-load-test-driver:0.3.0-SNAPSHOT

docker push northamerica-northeast2-docker.pkg.dev/scylla-cassandra-comparison/load-test/shopping-cart-load-test-driver:0.3.0-SNAPSHOT


Enable the Filestore CSI driver on an existing cluster:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'shopping-cart-load-driver' will launch multiple nodes, where each of these nodes will create a directory in the shared PVC provisioned through PersistentVolumeClaim. This means that we have to create the PersistentVolumeClaim with 'ReadWriteMany' accessMode.

In order to provision a 'ReadWriteMany' accessMode for PersistentVolumeClaim we need to enable 'Filestore' backed Persistent Volume.

To create 'Filestore' backed Persistent Volume we need to install the FileStoreCsiDriver in our cluster.

REFs:
https://cloud.google.com/kubernetes-engine/docs/how-to/persistent-volumes/filestore-csi-driver
https://www.opcito.com/blogs/introduction-to-persistent-volumes-and-mounting-gcp-buckets-on-containers
https://devopscube.com/persistent-volume-google-kubernetes-engine/
https://cloud.google.com/filestore/docs/csi-driver#existing

# Install the Filestore CSI driver in 'load-test' cluster
# NOTE: This command takes several minutes to complete
gcloud container clusters update load-test \
   --update-addons=GcpFilestoreCsiDriver=ENABLED \
   --zone=northamerica-northeast2-a


# To see the list of installed storage classes in your cluster
kubectl get sc

# Two of these types are:
# standard-rwx, using the Basic HDD Filestore service tier.
# premium-rwx, using the Basic SSD Filestore service tier.
# Please see https://cloud.google.com/filestore/docs/service-tiers#basic_hdd_and_basic_ssd_tiers for further details
#
# NOTE: In order to avoid the slow result writing coming in our way of performance test, We should use 'premium-rwx' storage class to run our load-tests.


Enable Cloud Filestore API:
~~~~~~~~~~~~~~~~~~~~~~~~~~~
In GCP console under API & Services -> select '+Enable APIs & services' (from top menue),
THEN search for 'Cloud Filestore API' and enable it.


Configure a Security Context for a Pod or Container:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://kubernetes.io/docs/tasks/configure-pod-container/security-context/


Persistent Volumes - General information:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes
https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options



Deploy shopping-cart-load-driver job:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd ~/Work/akka-cqrs-cart-example-load-test/load-testing


# NOTE: The following takes takes several minutes to complete, as PVC claim takes time to bind
#       The PVC status can be observed in 'Storage' section of the 'loat-test ' cluster in the GCP console UI.
kubectl apply -f deployment/resources.yaml


# TODO: ALTERNATE: We have to first deploy the storage-class and PVC, and then deploy JOB
kubectl apply -f deployment/load-test-storage.yaml
kubectl apply -f deployment/load-test-job.yaml



kubectl get services

kubectl get pods

kubectl logs -f shopping-cart-load-driver-8g87p



# --------------------------------------------------------------------------------------
# SETP-5 Deploy Ubuntu POD to access PVC (after load-test application run to completion)
# --------------------------------------------------------------------------------------
docker pull ubuntu:20.04

docker tag ubuntu:20.04 \
  northamerica-northeast2-docker.pkg.dev/scylla-cassandra-comparison/load-test/ubuntu:20.04

docker push northamerica-northeast2-docker.pkg.dev/scylla-cassandra-comparison/load-test/ubuntu:20.04

kubectl apply -f deployment/results-pod.yaml

kubectl get pods
kubectl exec --stdin --tty results -- /bin/bash

kubectl delete pod results




# -------------------------------------------------------------------------------------
# SETP-6 Miscellaneous commands
# -------------------------------------------------------------------------------------


To export configurations for all assets within the specified GCP project, organization, or folder:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://cloud.google.com/sdk/gcloud/reference/beta/resource-config/bulk-export


To see details about created Persistent Volume (PV)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kubectl get pvc -o wide
kubectl get pv pvc-a3d96baf-0d71-4877-b7bc-01d7a6f43b6b -o yaml > ~/Downloads/shopping-cart-load-driver_PV.yaml


To see details about created Persistent Volume Claim (PVC)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kubectl get pvc shopping-cart-load-driver-pvc -o jsonpath='{.metadata.namespace}'

# Or see the entire yaml
kubectl get pvc shopping-cart-load-driver-pvc -o yaml

To get to know the different options that kubernetes has to create a persintent volume:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kubectl get storageclass
kubectl describe storageclass


To get terminal access to the running load-test POD:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kubectl get pods

kubectl exec --stdin --tty shopping-cart-load-driver-w8b6m -- /bin/bash

kubectl cp shopping-cart-load-driver-w8b6m:/mnt/simulation-data/results-shopping-cart-load-driver-w8b6m/shoppingcartserviceloadtest-20230328001857874/simulation.log ~/Work/Scylla_Cassandra
